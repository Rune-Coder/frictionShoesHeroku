{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Development\\\\React-Project-1\\\\src\\\\pages\\\\paymentSuccess\\\\paymentSuccess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BadgeCheckIcon from '../../icons/badgeCheckIcon';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addressActions } from '../../store/addressStore';\nimport classes from './paymentSuccess.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PaymentSuccess(props) {\n  _s();\n\n  useEffect(() => {\n    document.title = 'Online Shopping site for shoes in India | Friction';\n  });\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n  const login = useSelector(state => state.login.loggedin);\n  const address = useSelector(state => state.address.currAddress);\n  console.log(address);\n  useEffect(() => {\n    if (!login || !address.pin) navigate(`/`, {\n      replace: true\n    });\n  }, [login, address, navigate]);\n  const userSub = useSelector(state => state.login.userData);\n  const [orders, setOrders] = useState([]);\n  const [today, setToday] = useState(\"\");\n  useEffect(() => {\n    //get orders data mongodb\n    async function getOrders(email) {\n      const res = await fetch(\"/api/user/history-get\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await res.json();\n      if (res.ok && data.orders) setOrders(data.orders);\n    }\n\n    getOrders(userSub.email);\n  }, [userSub.email]);\n  useEffect(() => {\n    var date = new Date();\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var yyyy = date.getFullYear();\n    date = dd + '/' + mm + '/' + yyyy;\n    setToday(date);\n  }, []);\n  useEffect(() => {\n    const bill = localStorage.getItem(\"billStore\") ? JSON.parse(localStorage.getItem(\"billStore\")) : [{\n      amount: 0\n    }];\n    const products = localStorage.getItem(\"products\") ? JSON.parse(localStorage.getItem(\"products\")) : [];\n    var currOrder = orders.slice();\n    currOrder.push({\n      order_id: \"\",\n      status: \"processing\",\n      bill: bill,\n      products: products,\n      payment: \"Online\",\n      address: address,\n      date: today\n    });\n    setOrders(currOrder);\n  }, [userSub.email, address, orders, today]);\n  useEffect(() => {}, [userSub.email, address, orders, today]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.layout,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.badge,\n        children: /*#__PURE__*/_jsxDEV(BadgeCheckIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Order Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaymentSuccess, \"bA4YH2U4boXs11N29E2G7UfDn9I=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useSelector];\n});\n\n_c = PaymentSuccess;\nexport default PaymentSuccess;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentSuccess\");","map":{"version":3,"sources":["D:/Web Development/React-Project-1/src/pages/paymentSuccess/paymentSuccess.js"],"names":["React","useState","useEffect","useNavigate","BadgeCheckIcon","useSelector","useDispatch","addressActions","classes","PaymentSuccess","props","document","title","dispatch","navigate","login","state","loggedin","address","currAddress","console","log","pin","replace","userSub","userData","orders","setOrders","today","setToday","getOrders","email","res","fetch","method","headers","body","JSON","stringify","data","json","ok","date","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","bill","localStorage","getItem","parse","amount","products","currOrder","slice","push","order_id","status","payment","layout","badge"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport BadgeCheckIcon from '../../icons/badgeCheckIcon';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addressActions } from '../../store/addressStore';\r\nimport classes from './paymentSuccess.module.css';\r\n\r\nfunction PaymentSuccess(props){\r\n\r\n    useEffect(() => {\r\n        document.title = 'Online Shopping site for shoes in India | Friction';\r\n    });\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    let navigate = useNavigate();\r\n    const login = useSelector((state) => state.login.loggedin);\r\n    const address = useSelector((state) => state.address.currAddress);\r\n\r\n    console.log(address);\r\n\r\n    useEffect(() =>{\r\n\r\n    if(!login || !address.pin)\r\n        navigate(`/`, { replace: true });\r\n\r\n    }, [login, address, navigate]);\r\n\r\n    \r\n    const userSub = useSelector((state) => state.login.userData);\r\n\r\n    const [orders, setOrders] = useState([]);\r\n    const [today, setToday] = useState(\"\");\r\n\r\n\r\n    useEffect(() =>{\r\n\r\n         //get orders data mongodb\r\n        async function getOrders(email){\r\n\r\n            const res = await fetch(\"/api/user/history-get\", {\r\n                method: \"POST\",\r\n                headers:{\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ email })\r\n            });\r\n        \r\n            const data = await res.json();\r\n                \r\n            if(res.ok && data.orders)\r\n                setOrders(data.orders);\r\n        }\r\n        \r\n        getOrders(userSub.email);\r\n        \r\n    }, [userSub.email]);\r\n\r\n    useEffect(() =>{\r\n\r\n        var date = new Date();\r\n        var dd = String(date.getDate()).padStart(2, '0');\r\n        var mm = String(date.getMonth() + 1).padStart(2, '0');\r\n        var yyyy = date.getFullYear();\r\n\r\n        date = dd + '/' + mm + '/' + yyyy;\r\n\r\n        setToday(date);\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() =>{\r\n        const bill = localStorage.getItem(\"billStore\") ? JSON.parse(localStorage.getItem(\"billStore\")) : [{amount: 0}];\r\n        const products = localStorage.getItem(\"products\") ? JSON.parse(localStorage.getItem(\"products\")) : [];\r\n\r\n        var currOrder = orders.slice();\r\n        currOrder.push({\r\n            order_id: \"\",\r\n            status: \"processing\",\r\n            bill: bill,\r\n            products: products,\r\n            payment: \"Online\",\r\n            address: address,\r\n            date: today\r\n        });\r\n\r\n        setOrders(currOrder);\r\n    }, [userSub.email, address, orders, today]);\r\n\r\n    useEffect(() =>{\r\n\r\n        \r\n\r\n        \r\n\r\n       \r\n\r\n    }, [userSub.email, address, orders, today]);\r\n\r\n    return(\r\n        <div className={classes.layout}>\r\n            <div><span className={classes.badge}><BadgeCheckIcon /></span></div>\r\n            <p>Order Successfull</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaymentSuccess;"]},"metadata":{},"sourceType":"module"}